// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<App /> renders correctly 1`] = `
<View
  collapsable={false}
  pointerEvents="box-none"
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <RNCSafeAreaProvider
      onInsetsChange={[Function]}
      style={
        Array [
          Object {
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        pointerEvents="box-none"
        style={
          Object {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            pointerEvents="box-none"
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              style={
                Object {
                  "backgroundColor": "rgb(255, 255, 255)",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": Object {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            pointerEvents="box-none"
            style={
              Object {
                "height": 64,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 20,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "flexDirection": "row",
                  "justifyContent": "center",
                }
              }
            >
              <View
                pointerEvents="box-none"
                style={
                  Object {
                    "marginHorizontal": 16,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    Object {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  MovieList
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          pointerEvents="box-none"
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "overflow": undefined,
                },
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              needsOffscreenAlphaCompositing={false}
              pointerEvents="box-none"
              style={
                Object {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  Object {
                    "flex": 1,
                    "transform": Array [
                      Object {
                        "translateX": 0,
                      },
                      Object {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="none"
                  style={
                    Object {
                      "backgroundColor": "rgb(242, 242, 242)",
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "shadowColor": "#000",
                      "shadowOffset": Object {
                        "height": 1,
                        "width": -1,
                      },
                      "shadowOpacity": 0.3,
                      "shadowRadius": 5,
                      "top": 0,
                      "width": 3,
                    }
                  }
                />
                <View
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "rgb(242, 242, 242)",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <RCTSafeAreaView
                        emulateUnlessSupported={true}
                        style={
                          Object {
                            "backgroundColor": "white",
                            "flex": 1,
                            "paddingTop": 10,
                          }
                        }
                      >
                        <View
                          style={
                            Object {
                              "display": "flex",
                              "flexDirection": "row",
                              "justifyContent": "flex-start",
                              "paddingLeft": 16,
                              "paddingRight": 16,
                              "zIndex": 10,
                            }
                          }
                        >
                          <View
                            style={
                              Object {
                                "left": 25,
                                "position": "absolute",
                                "top": 18,
                              }
                            }
                          >
                            <RNSVGSvgView
                              align="xMidYMid"
                              bbHeight="14"
                              bbWidth="14"
                              fill="none"
                              focusable={false}
                              height="14"
                              meetOrSlice={0}
                              minX={0}
                              minY={0}
                              style={
                                Array [
                                  Object {
                                    "backgroundColor": "transparent",
                                    "borderWidth": 0,
                                  },
                                  Object {
                                    "flex": 0,
                                    "height": 14,
                                    "width": 14,
                                  },
                                ]
                              }
                              vbHeight={14}
                              vbWidth={14}
                              width="14"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <RNSVGGroup
                                fill={null}
                                propList={
                                  Array [
                                    "fill",
                                  ]
                                }
                              >
                                <RNSVGPath
                                  clipRule={0}
                                  d="M13.7431 12.5741L9.91009 8.73956C10.5972 7.80246 10.9652 6.66953 10.9601 5.50756C10.947 2.47441 8.49372 0.0175744 5.46059 5.57178e-05C4.00907 -0.00651157 2.61522 0.567712 1.58953 1.59481C0.563845 2.6219 -0.00846493 4.01655 9.46502e-05 5.46806C0.0132044 8.50148 2.4667 10.9585 5.50009 10.9761C6.6668 10.9811 7.80387 10.6088 8.74159 9.91456L8.74559 9.91156L12.5751 13.7431C12.7821 13.9603 13.0907 14.0482 13.3811 13.9728C13.6716 13.8973 13.8983 13.6704 13.9735 13.3799C14.0487 13.0894 13.9605 12.7809 13.7431 12.5741ZM5.49609 9.87806C3.06951 9.8641 1.10675 7.89866 1.09609 5.47206C1.08955 4.311 1.54743 3.19551 2.36783 2.37389C3.18822 1.55228 4.30303 1.09273 5.46409 1.09756C7.89068 1.11151 9.85344 3.07695 9.86409 5.50356C9.87064 6.66461 9.41276 7.78011 8.59236 8.60172C7.77197 9.42334 6.65716 9.88288 5.49609 9.87806Z"
                                  fill={4287532691}
                                  fillRule={0}
                                  propList={
                                    Array [
                                      "fill",
                                      "fillRule",
                                    ]
                                  }
                                />
                              </RNSVGGroup>
                            </RNSVGSvgView>
                          </View>
                          <View
                            style={
                              Object {
                                "paddingVertical": 4,
                                "width": AnimatedValue {
                                  " __value": 0,
                                },
                              }
                            }
                          >
                            <TextInput
                              allowFontScaling={true}
                              autoCompleteType="off"
                              autoCorrect={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Search"
                              placeholderTextColor="#8E8E93"
                              rejectResponderTermination={true}
                              style={
                                Array [
                                  Object {
                                    "borderRadius": 12,
                                    "fontSize": 18,
                                    "fontWeight": "400",
                                    "letterSpacing": 0.5,
                                    "lineHeight": 22,
                                    "paddingHorizontal": 12,
                                    "paddingLeft": 32,
                                    "paddingVertical": 10,
                                  },
                                  Object {
                                    "backgroundColor": "rgba(142,142,147,0.12)",
                                    "color": "#000000",
                                  },
                                  Object {},
                                ]
                              }
                              underlineColorAndroid="transparent"
                              value=""
                            />
                            <View
                              style={
                                Object {
                                  "position": "absolute",
                                  "right": 10,
                                  "top": 15,
                                }
                              }
                            >
                              <ActivityIndicator
                                animating={true}
                                color="#636366"
                                hidesWhenStopped={true}
                                size="small"
                              />
                            </View>
                          </View>
                          <View
                            accessible={true}
                            focusable={true}
                            onClick={[Function]}
                            onResponderGrant={[Function]}
                            onResponderMove={[Function]}
                            onResponderRelease={[Function]}
                            onResponderTerminate={[Function]}
                            onResponderTerminationRequest={[Function]}
                            onStartShouldSetResponder={[Function]}
                            style={
                              Object {
                                "display": "flex",
                                "justifyContent": "center",
                                "opacity": 1,
                              }
                            }
                          >
                            <Text
                              style={
                                Array [
                                  Object {
                                    "color": "#007AFF",
                                    "fontSize": 17,
                                    "opacity": AnimatedValue {
                                      " __value": 0,
                                    },
                                    "paddingLeft": 16,
                                  },
                                  Object {},
                                ]
                              }
                            >
                              Cancel
                            </Text>
                          </View>
                        </View>
                        <RCTScrollView
                          ListFooterComponent={[Function]}
                          data={Array []}
                          disableVirtualization={false}
                          getItem={[Function]}
                          getItemCount={[Function]}
                          horizontal={false}
                          initialNumToRender={10}
                          keyExtractor={[Function]}
                          maxToRenderPerBatch={10}
                          onContentSizeChange={[Function]}
                          onEndReached={[Function]}
                          onEndReachedThreshold={0.5}
                          onLayout={[Function]}
                          onMomentumScrollEnd={[Function]}
                          onRefresh={[Function]}
                          onScroll={[Function]}
                          onScrollBeginDrag={[Function]}
                          onScrollEndDrag={[Function]}
                          refreshControl={
                            <RefreshControlMock
                              onRefresh={[Function]}
                              refreshing={false}
                            />
                          }
                          refreshing={false}
                          removeClippedSubviews={false}
                          renderItem={[Function]}
                          scrollEventThrottle={50}
                          stickyHeaderIndices={Array []}
                          updateCellsBatchingPeriod={50}
                          viewabilityConfigCallbackPairs={Array []}
                          windowSize={21}
                        >
                          <RCTRefreshControl />
                          <View>
                            <View
                              onLayout={[Function]}
                            />
                          </View>
                        </RCTScrollView>
                      </RCTSafeAreaView>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </RNCSafeAreaProvider>
  </View>
</View>
`;
